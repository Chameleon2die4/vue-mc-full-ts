import { Ref } from 'vue';
import { Base } from './Base';
import { Model } from './Model';
import { ICollectionOptions } from './types';
export declare const NO_PAGE: null;
export declare const LAST_PAGE = 0;
export declare class Collection extends Base {
    protected _loading: Ref<boolean>;
    protected _saving: Ref<boolean>;
    protected _deleting: Ref<boolean>;
    protected _fatal: Ref<boolean>;
    protected _models: Ref<Model[]>;
    protected _attributes: Ref<Record<string, unknown>>;
    protected _registry: Ref<Record<string, unknown>>;
    protected _page: Ref<number | null>;
    constructor(models?: Model[], attributes?: Record<string, unknown>, options?: Record<string, any>);
    get loading(): boolean;
    set loading(value: boolean);
    get saving(): boolean;
    set saving(value: boolean);
    get deleting(): boolean;
    set deleting(value: boolean);
    get fatal(): boolean;
    set fatal(value: boolean);
    get models(): Model[];
    set models(value: Model[]);
    get attributes(): Record<string, unknown>;
    model(): typeof Model;
    defaults(): Record<string, unknown>;
    createModel(attributes: Record<string, unknown>): Model;
    add(models: Model | Model[]): void;
    remove(models: Model | Model[]): void;
    protected _removeModelAtIndex(index: number): Model;
    protected addModelToRegistry(model: Model): void;
    protected removeModelFromRegistry(model: Model): void;
    protected hasModelInRegistry(model: Model): boolean;
    protected onAdd(model: Model): void;
    protected onRemove(model: Model): void;
    indexOf(model: Model): number;
    clear(): void;
    clearModels(): void;
    clearState(): void;
    get(attribute: string, fallback?: unknown): unknown;
    set(attribute: string | Record<string, unknown>, value?: unknown): void;
    getModels(): Model[];
    getAttributes(): Record<string, unknown>;
    size(): number;
    isEmpty(): boolean;
    clone(): Collection;
    validate(): Promise<boolean>;
    page(page: number | null): Collection;
    getPage(): number | null;
    isPaginated(): boolean;
    isLastPage(): boolean;
    getDefaultOptions(): ICollectionOptions;
    getRouteParameters(): Record<string, unknown>;
    toJSON(): Model[];
    toArray(): unknown[];
    uniqueId(): string;
}
