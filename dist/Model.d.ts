import { Ref } from 'vue';
import { Base } from './Base';
import { Collection } from './Collection';
import { Response } from './Response';
import { IModelOptions } from './types';
export declare class Model<A extends Record<string, any> = Record<string, any>> extends Base {
    [key: string]: any;
    attributes: Ref<A>;
    protected _collections: Ref<Record<string, any>>;
    protected _reference: Ref<A>;
    protected _mutations: Ref<Record<string, any>>;
    protected _errors: Ref<Record<string, any>>;
    protected _loading: Ref<boolean>;
    protected _saving: Ref<boolean>;
    protected _deleting: Ref<boolean>;
    protected _fatal: Ref<boolean>;
    constructor(attributes?: A | Ref<A>, collection?: Collection | null, options?: Record<string, any>);
    get loading(): boolean;
    set loading(value: boolean);
    get saving(): boolean;
    set saving(value: boolean);
    get deleting(): boolean;
    set deleting(value: boolean);
    get fatal(): boolean;
    set fatal(value: boolean);
    defaults(): A;
    validation(): Record<string, any>;
    mutations(): Record<string, any>;
    compileMutators(): void;
    clone(): Model<A>;
    validateAttribute(attribute: string): boolean;
    validate(attributes?: A): Promise<boolean>;
    getValidateRules(attribute: string): any[];
    setAttributeErrors(attribute: string, errors: string[]): void;
    getErrors(): Record<string, string>;
    clearErrors(): void;
    get(attribute: string, fallback?: any): any;
    set(attribute: string | A, value?: any): void;
    getAttributes(): A;
    reset(attribute?: string | string[] | A): void;
    saved(attribute: string, fallback?: any): any;
    save(): Promise<Response>;
    getSaveData(): A;
    isNew(): boolean;
    getSaveMethod(): string;
    getUpdateMethod(): string;
    shouldPatch(): boolean;
    protected onSaveSuccess(response: Response): Response;
    protected onSaveFailure(error: any): Promise<any>;
    protected onSaveValidationFailure(error: any): Promise<any>;
    protected onFatalSaveFailure(error: any): Promise<any>;
    setErrors(errors: Record<string, any>): void;
    sync(): void;
    registerCollection(collection: Collection): void;
    hasCollection(collection: Collection | string | Record<string, any>): boolean;
    clearState(): void;
    assign(attributes: A): A;
    mutated(attribute: string, value: any): any;
    getRouteParameters(): Record<string, any>;
    protected getDefaultOptions(): IModelOptions;
    toJSON(): A;
    changed(): string[] | false;
}
