import { Ref } from 'vue';
import { Base } from './Base';
import { Collection } from './Collection';
import { Response } from './Response';
export declare class Model extends Base {
    protected _collections: Ref<Record<string, any>>;
    protected _reference: Ref<Record<string, any>>;
    protected _attributes: Ref<Record<string, any>>;
    protected _mutations: Ref<Record<string, any>>;
    protected _errors: Ref<Record<string, any>>;
    protected _loading: Ref<boolean>;
    protected _saving: Ref<boolean>;
    protected _deleting: Ref<boolean>;
    protected _fatal: Ref<boolean>;
    constructor(attributes?: Record<string, any>, collection?: Collection | null, options?: Record<string, any>);
    get loading(): boolean;
    set loading(value: boolean);
    get saving(): boolean;
    set saving(value: boolean);
    get deleting(): boolean;
    set deleting(value: boolean);
    get fatal(): boolean;
    set fatal(value: boolean);
    defaults(): Record<string, any>;
    validation(): Record<string, any>;
    mutations(): Record<string, any>;
    compileMutators(): void;
    clone(): Model;
    validateAttribute(attribute: string): boolean;
    validate(attributes?: Record<string, any>): Promise<boolean>;
    getValidateRules(attribute: string): any[];
    setAttributeErrors(attribute: string, errors: string[]): void;
    getErrors(): Record<string, string>;
    clearErrors(): void;
    get(attribute: string, fallback?: any): any;
    set(attribute: string | Record<string, any>, value?: any): void;
    getAttributes(): Record<string, any>;
    reset(attribute?: string | string[] | Record<string, any>): void;
    saved(attribute: string, fallback?: any): any;
    save(): Promise<Response>;
    getSaveData(): Record<string, any>;
    isNew(): boolean;
    getSaveMethod(): string;
    getUpdateMethod(): string;
    shouldPatch(): boolean;
    protected onSaveSuccess(response: Response): Response;
    protected onSaveFailure(error: any): Promise<any>;
    protected onSaveValidationFailure(error: any): Promise<any>;
    protected onFatalSaveFailure(error: any): Promise<any>;
    setErrors(errors: Record<string, any>): void;
    sync(): void;
    registerCollection(collection: Collection): void;
    hasCollection(collection: Collection | string | Record<string, any>): boolean;
    clearState(): void;
    assign(attributes: Record<string, any>): Record<string, any>;
    mutated(attribute: string, value: any): any;
    getRouteParameters(): Record<string, any>;
    getDefaultOptions(): Record<string, any>;
    toJSON(): Record<string, any>;
}
